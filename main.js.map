{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;ACZyC;AACc;AAEvD,IAAM,MAAM,GAAW,EAAE,CAAC;AAM1B;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACT7B,+DAA+D,+H;;;;;;;;;;;ACA/D,qdAAqd,eAAe,sCAAsC,UAAU,sCAAsC,aAAa,qMAAqM,qBAAqB,yLAAyL,KAAK,6NAA6N,kBAAkB,+MAA+M,aAAa,2GAA2G,MAAM,MAAM,MAAM,iXAAiX,+BAA+B,aAAa,yNAAyN,aAAa,sD;;;;;;;;;;;;;;;;;;ACAhoE;AACqB;AAS/D;IAgBI,sBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAfrC,UAAK,GAAG,qBAAqB,CAAC;QAI9B,qBAAgB,GAAQ,mBAAmB;QAC3C,wBAAmB,GAAQ,uBAAuB;QAClD,WAAM,GAAC,CAAC,KAAK,EAAC,KAAK,CAAC;IAatB,CAAC;IAZC;;OAEG;IACH,+BAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,kCAAkC;IACpC,CAAC;IAMD,0DAA0D;IAC1D,+BAAQ,GAAR;QACE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,+EAA+E,CAAC,CAAC,SAAS,CACtG,cAAI,IAAE,cAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAjB,CAAiB,CACxB,CAAC;IAGN,CAAC;IAID,kBAAkB;IAClB,sCAAe,GAAf;QAAA,iBAiBD;QAfG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;YACnG,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;YACzB,iBAAiB;QAClB,CAAC,CAAC,CAAC;QAGN,gDAAgD;QAChD,6HAA6H;QAE7H,4BAA4B;QAC5B,sBAAsB;QACtB,OAAO;IAET,CAAC;IAED,kBAAkB;IAClB,8CAAuB,GAAvB,UAAwB,KAAK;QAE3B,kBAAkB;QAClB,uBAAuB;QACvB,+IAA+I;QAE/I,4BAA4B;QAC5B,sBAAsB;QACtB,OAAO;QAGP,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,mCAAmC;QACnC,kIAAkI;QAElI,4BAA4B;QAC5B,sBAAsB;QACtB,SAAS;QACT,MAAM;IAER,CAAC;IAED,qCAAc,GAAd,UAAe,IAAI;QAAnB,iBAUC;QARC,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC;QAC3B,uBAAuB;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mDAAmD,IAAC,KAAG,IAAM,IAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;YACtH,KAAI,CAAC,QAAQ,GAAC,QAAQ,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YAC5B,iBAAiB;QAClB,CAAC,CAAC,CAAC;IAEJ,CAAC;IAtFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;+EAiB2B,+DAAU;OAhB1B,YAAY,CAuFxB;IAAD,mBAAC;CAAA;AAvFwB;;;;;;;;;;;;;;;;;;;;;;ACViC;AACjB;AACe;AACA;AACT;AAc/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,oEAAgB;gBAChB,qEAAgB;aACjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AClBtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  \\n  \\n   \\n  <!-- <table class=\\\"table table-bordered\\\">\\n    <thead>\\n      <tr>\\n        <th class=\\\"info\\\">Repositories</th>\\n        <th class=\\\"info\\\">Name</th>\\n        \\n        <th class=\\\"info\\\">Private</th>\\n       \\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let r of repos\\\" class=\\\"success\\\">\\n        <td><strong>{{ r.full_name }}</strong></td>\\n        <td><strong>{{ r.name }}</strong></td>\\n        <td><strong>{{ r.private }}</strong></td>\\n\\n\\n      \\n    </tbody>\\n  </table> -->\\n  <div class=\\\"dropdown\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n          {{selectSourceControl}}\\n          </button>\\n          <div class=\\\"dropdown-menu\\\" >\\n      \\n              <li *ngFor=\\\"let src of srcArr\\\" class=\\\"dropdown-item\\\" (click)=\\\"getSelectedSourceControl()\\\">{{src}}</li>\\n             \\n            </div>\\n            \\n\\n            <div class=\\\"dropdown\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">\\n                {{selectRepository}}\\n                </button>\\n                <div class=\\\"dropdown-menu\\\" >\\n                  \\n                  <li  *ngFor=\\\"let r of repos\\\" class=\\\"dropdown-item\\\" (click)=\\\"getSelectedRep(r.name)\\\">{{r.full_name}}</li>\\n                  \\n                </div>\\n                \\n              </div>\\n          &nbsp;&nbsp;&nbsp;&nbsp;\\n    \\n\\n          \\n  <table class=\\\"table table-bordered table\\\">\\n    <thead>\\n      <tr>\\n     \\n        \\n        \\n        <th class=\\\"info\\\">Comments</th>\\n      <th class=\\\"info\\\">Severity</th> \\n       \\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let commnt of comments\\\" class=\\\"success\\\"  >\\n        \\n        <td *ngIf=\\\"comments.length!=0;else other_content\\\"><strong>{{commnt.body}}</strong></td>\\n        <td><strong>TBD</strong></td>\\n\\n\\n      \\n    </tbody>\\n  </table>\\n  <ng-template #other_content>No comments to show</ng-template>\\n\\n  <!-- <ul *ngFor=\\\"let commnt of comments\\\">\\n    <li>{{commnt.body}}</li>\\n  </ul> -->\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { getLocaleDateFormat } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'getting-started-ng5';\n  data:any;\n  repos:any;\n  comments:any;\n  selectRepository:string=\"Select Repository\"\n  selectSourceControl:string=\"Select Source Control\"\n  srcArr=['TFS','GIT']\n  /**\n   *\n   */\n  ngOnInit() {\n    this.getLogin();\n    this.getrepositories();\n    // this.getrepositoriescomments();\n  }\n    constructor(private http:HttpClient) {\n \n  \n  \n}\n  // Uses http.get() to load data from a single API endpoint\n  getLogin() {\n    console.log(\"test\")\n      this.http.get('https://api.github.com/?access_token=ee10d8ac1e59a471868c6b5e24ba13eacd4d67e8').subscribe(\n        data=>console.log(data)\n      );\n\n      \n  }\n\n\n  \n  //get repositories\n  getrepositories()\n  {\n    console.log(\"repos\")\n    this.http.get('https://api.github.com/users/swapnilgajbhiyesyne/repos').subscribe((response: Response) => {\n      this.repos = response;\n       console.log(this.repos);\n      // return result;\n     });\n\n\n  //     this.getrepositoriescomments(this.repos);\n  //    this.http.get('https://api.github.com/repos/swapnilgajbhiyesyne/ZaikaApp/comments').subscribe((response: Response) => {\n    \n  //    console.log(response);\n  //   // return result;\n  //  });\n  \n}\n\n//get repositories\ngetrepositoriescomments(repos)\n{\n  // alert('called')\n  // console.log(\"repos\")\n  // this.http.get('https://api.github.com/repos/swapnilgajbhiyesyne/swapnilgajbhiyesyne.github.io/comments').subscribe((response: Response) => {\n    \n  //    console.log(response);\n  //   // return result;\n  //  });\n\n \n  console.log(repos);\n  // repos.array.forEach(element => {\n  // this.http.get('https://api.github.com/repos/swapnilgajbhiyesyne/'+element.name+'/comments').subscribe((response: Response) => {\n    \n  //    console.log(response);\n  //   // return result;\n  //  });  \n  // });\n\n}\n\ngetSelectedRep(name)\n{\n  this.selectRepository=name;\n  //alert('called'+name);\n  this.http.get('https://api.github.com/repos/swapnilgajbhiyesyne/'+`${name}`+'/comments').subscribe((response: Response) => {\n  this.comments=response;\n   console.log(this.comments);\n  // return result;\n });\n\n}\n}\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]           \n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}